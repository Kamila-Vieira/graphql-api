const { gql } = require("apollo-server");

const useSchema = gql`
  """ 
  scalar de data e hora
  """
  scalar DateTime
  
  """ 
  Usuário da aplicação
  """
  type User {
    id: ID!
    nome: String! # Campo não pode ser nulo
    ativo: Boolean! # Campo não pode ser nulo
    email: String
    role: Role!
    createdAt: DateTime
  }
  
  """ 
  Input das nutations de criação e atualização de novos usuários
  """
  input UserInput{
    nome: String
    ativo: Boolean
    email: String
    role: RoleType
  }
  
  """ 
  Tipos de ocupação do usuário
  """
  enum RoleType{
    ESTUDANTE
    DOCENTE
    COORDENACAO
  }
  
  """ 
  Ocupação do usuário
  """
  type Role{
    id: ID!
    type: RoleType!
  }
  
  interface CustomResponse{
    # Tipo abstrato => não é usada diretamente no esquema, mas é uma base para a criação de outros tipos
    code: Int!
    message: String!
  }
  
  type DeleteUserResponse implements CustomResponse {
    code: Int!
    message: String!
  }
  
  type UpdateUserResponse implements CustomResponse {
    code: Int!
    message: String!
    user: User!
  }
  
  type CreateUserResponse implements CustomResponse {
    code: Int!
    message: String!
    user: User!
  }
  
  """ 
  Query root com a base de queries a serem utilizadas na aplicação
  """
  type Query{
    users: [User]
    user(id: ID!): User!
    usersByRole(roleId: ID!): [User]
    activeUsers: [User]
  }
  
  """ 
  Mutation root com a base de mutations a serem utilizadas na aplicação
  """
  type Mutation{
    createUser(input: UserInput, createdAt: DateTime): CreateUserResponse!
    updateUser(id: ID!, input: UserInput): UpdateUserResponse!
    deleteUser(id: ID!): DeleteUserResponse!
  }
`;

module.exports = useSchema